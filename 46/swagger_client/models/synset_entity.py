# coding: utf-8

"""
    WordNet APIs

    You can access ALL WordNet DB.<BR />[Endpoint] https://api.apitore.com/api/46  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SynsetEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'pos': 'str',
        'src': 'str',
        'synset': 'str'
    }

    attribute_map = {
        'name': 'name',
        'pos': 'pos',
        'src': 'src',
        'synset': 'synset'
    }

    def __init__(self, name=None, pos=None, src=None, synset=None):  # noqa: E501
        """SynsetEntity - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._pos = None
        self._src = None
        self._synset = None
        self.discriminator = None

        self.name = name
        self.pos = pos
        self.src = src
        self.synset = synset

    @property
    def name(self):
        """Gets the name of this SynsetEntity.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this SynsetEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SynsetEntity.

        Name  # noqa: E501

        :param name: The name of this SynsetEntity.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pos(self):
        """Gets the pos of this SynsetEntity.  # noqa: E501

        Part-of-speech  # noqa: E501

        :return: The pos of this SynsetEntity.  # noqa: E501
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this SynsetEntity.

        Part-of-speech  # noqa: E501

        :param pos: The pos of this SynsetEntity.  # noqa: E501
        :type: str
        """
        if pos is None:
            raise ValueError("Invalid value for `pos`, must not be `None`")  # noqa: E501

        self._pos = pos

    @property
    def src(self):
        """Gets the src of this SynsetEntity.  # noqa: E501

        Src  # noqa: E501

        :return: The src of this SynsetEntity.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this SynsetEntity.

        Src  # noqa: E501

        :param src: The src of this SynsetEntity.  # noqa: E501
        :type: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")  # noqa: E501

        self._src = src

    @property
    def synset(self):
        """Gets the synset of this SynsetEntity.  # noqa: E501

        Synset  # noqa: E501

        :return: The synset of this SynsetEntity.  # noqa: E501
        :rtype: str
        """
        return self._synset

    @synset.setter
    def synset(self, synset):
        """Sets the synset of this SynsetEntity.

        Synset  # noqa: E501

        :param synset: The synset of this SynsetEntity.  # noqa: E501
        :type: str
        """
        if synset is None:
            raise ValueError("Invalid value for `synset`, must not be `None`")  # noqa: E501

        self._synset = synset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SynsetEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
