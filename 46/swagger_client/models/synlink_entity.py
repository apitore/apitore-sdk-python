# coding: utf-8

"""
    WordNet APIs

    You can access ALL WordNet DB.<BR />[Endpoint] https://api.apitore.com/api/46  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SynlinkEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'src': 'str',
        'synset1': 'str',
        'synset2': 'str'
    }

    attribute_map = {
        'link': 'link',
        'src': 'src',
        'synset1': 'synset1',
        'synset2': 'synset2'
    }

    def __init__(self, link=None, src=None, synset1=None, synset2=None):  # noqa: E501
        """SynlinkEntity - a model defined in Swagger"""  # noqa: E501

        self._link = None
        self._src = None
        self._synset1 = None
        self._synset2 = None
        self.discriminator = None

        self.link = link
        self.src = src
        self.synset1 = synset1
        self.synset2 = synset2

    @property
    def link(self):
        """Gets the link of this SynlinkEntity.  # noqa: E501

        Link  # noqa: E501

        :return: The link of this SynlinkEntity.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SynlinkEntity.

        Link  # noqa: E501

        :param link: The link of this SynlinkEntity.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def src(self):
        """Gets the src of this SynlinkEntity.  # noqa: E501

        Src  # noqa: E501

        :return: The src of this SynlinkEntity.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this SynlinkEntity.

        Src  # noqa: E501

        :param src: The src of this SynlinkEntity.  # noqa: E501
        :type: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")  # noqa: E501

        self._src = src

    @property
    def synset1(self):
        """Gets the synset1 of this SynlinkEntity.  # noqa: E501

        Synset1  # noqa: E501

        :return: The synset1 of this SynlinkEntity.  # noqa: E501
        :rtype: str
        """
        return self._synset1

    @synset1.setter
    def synset1(self, synset1):
        """Sets the synset1 of this SynlinkEntity.

        Synset1  # noqa: E501

        :param synset1: The synset1 of this SynlinkEntity.  # noqa: E501
        :type: str
        """
        if synset1 is None:
            raise ValueError("Invalid value for `synset1`, must not be `None`")  # noqa: E501

        self._synset1 = synset1

    @property
    def synset2(self):
        """Gets the synset2 of this SynlinkEntity.  # noqa: E501

        Synset2  # noqa: E501

        :return: The synset2 of this SynlinkEntity.  # noqa: E501
        :rtype: str
        """
        return self._synset2

    @synset2.setter
    def synset2(self, synset2):
        """Sets the synset2 of this SynlinkEntity.

        Synset2  # noqa: E501

        :param synset2: The synset2 of this SynlinkEntity.  # noqa: E501
        :type: str
        """
        if synset2 is None:
            raise ValueError("Invalid value for `synset2`, must not be `None`")  # noqa: E501

        self._synset2 = synset2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SynlinkEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
