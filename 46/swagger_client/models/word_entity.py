# coding: utf-8

"""
    WordNet APIs

    You can access ALL WordNet DB.<BR />[Endpoint] https://api.apitore.com/api/46  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WordEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lang': 'str',
        'lemma': 'str',
        'pos': 'str',
        'pron': 'str',
        'wordid': 'int'
    }

    attribute_map = {
        'lang': 'lang',
        'lemma': 'lemma',
        'pos': 'pos',
        'pron': 'pron',
        'wordid': 'wordid'
    }

    def __init__(self, lang=None, lemma=None, pos=None, pron=None, wordid=None):  # noqa: E501
        """WordEntity - a model defined in Swagger"""  # noqa: E501

        self._lang = None
        self._lemma = None
        self._pos = None
        self._pron = None
        self._wordid = None
        self.discriminator = None

        self.lang = lang
        self.lemma = lemma
        self.pos = pos
        if pron is not None:
            self.pron = pron
        self.wordid = wordid

    @property
    def lang(self):
        """Gets the lang of this WordEntity.  # noqa: E501

        Language  # noqa: E501

        :return: The lang of this WordEntity.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this WordEntity.

        Language  # noqa: E501

        :param lang: The lang of this WordEntity.  # noqa: E501
        :type: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")  # noqa: E501

        self._lang = lang

    @property
    def lemma(self):
        """Gets the lemma of this WordEntity.  # noqa: E501

        Lemma  # noqa: E501

        :return: The lemma of this WordEntity.  # noqa: E501
        :rtype: str
        """
        return self._lemma

    @lemma.setter
    def lemma(self, lemma):
        """Sets the lemma of this WordEntity.

        Lemma  # noqa: E501

        :param lemma: The lemma of this WordEntity.  # noqa: E501
        :type: str
        """
        if lemma is None:
            raise ValueError("Invalid value for `lemma`, must not be `None`")  # noqa: E501

        self._lemma = lemma

    @property
    def pos(self):
        """Gets the pos of this WordEntity.  # noqa: E501

        Part-of-speech  # noqa: E501

        :return: The pos of this WordEntity.  # noqa: E501
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this WordEntity.

        Part-of-speech  # noqa: E501

        :param pos: The pos of this WordEntity.  # noqa: E501
        :type: str
        """
        if pos is None:
            raise ValueError("Invalid value for `pos`, must not be `None`")  # noqa: E501

        self._pos = pos

    @property
    def pron(self):
        """Gets the pron of this WordEntity.  # noqa: E501

        Pron  # noqa: E501

        :return: The pron of this WordEntity.  # noqa: E501
        :rtype: str
        """
        return self._pron

    @pron.setter
    def pron(self, pron):
        """Sets the pron of this WordEntity.

        Pron  # noqa: E501

        :param pron: The pron of this WordEntity.  # noqa: E501
        :type: str
        """

        self._pron = pron

    @property
    def wordid(self):
        """Gets the wordid of this WordEntity.  # noqa: E501

        Word ID  # noqa: E501

        :return: The wordid of this WordEntity.  # noqa: E501
        :rtype: int
        """
        return self._wordid

    @wordid.setter
    def wordid(self, wordid):
        """Sets the wordid of this WordEntity.

        Word ID  # noqa: E501

        :param wordid: The wordid of this WordEntity.  # noqa: E501
        :type: int
        """
        if wordid is None:
            raise ValueError("Invalid value for `wordid`, must not be `None`")  # noqa: E501

        self._wordid = wordid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WordEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
