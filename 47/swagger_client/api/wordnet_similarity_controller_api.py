# coding: utf-8

"""
    WordNet Similarity APIs

    Calculate word similarity.<BR />[Endpoint] https://api.apitore.com/api/47  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WordnetSimilarityControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def hirststonge_using_get(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/hirststonge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hirststonge_using_get1(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get1(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get1_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get1_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get1_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get1_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get1`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get1`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/jiangconrath', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hirststonge_using_get2(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get2(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get2_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get2_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get2_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get2_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get2`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get2`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/leacockchodorow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hirststonge_using_get3(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get3(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get3_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get3_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get3_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get3_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get3`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get3`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/lesk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hirststonge_using_get4(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get4(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get4_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get4_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get4_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get4_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get4`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get4`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get4`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/lin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hirststonge_using_get5(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get5(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get5_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get5_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get5_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get5_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get5" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get5`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get5`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get5`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/path', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hirststonge_using_get6(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get6(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get6_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get6_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get6_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get6_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get6`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get6`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get6`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/resnik', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hirststonge_using_get7(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get7(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.hirststonge_using_get7_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
        else:
            (data) = self.hirststonge_using_get7_with_http_info(access_token, word1, word2, **kwargs)  # noqa: E501
            return data

    def hirststonge_using_get7_with_http_info(self, access_token, word1, word2, **kwargs):  # noqa: E501
        """WordNet Similarity WebAPI.  # noqa: E501

        WordNet similarity.<BR />Response<BR />&nbsp; Github: <a href=\"https://github.com/keigohtr/apitore-response-parent/tree/master/wordnet-response\">wordnet-response</a><BR />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.hirststonge_using_get7_with_http_info(access_token, word1, word2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_token: Access Token (required)
        :param str word1: Word1 (required)
        :param str word2: Word2 (required)
        :param str pos1: Part-of-speech1. [n:noun,v:verb,a:adjective,r:adverb]
        :param str pos2: Part-of-speech2. [n:noun,v:verb,a:adjective,r:adverb]
        :return: WordnetSimilarityResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'word1', 'word2', 'pos1', 'pos2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hirststonge_using_get7" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `hirststonge_using_get7`")  # noqa: E501
        # verify the required parameter 'word1' is set
        if ('word1' not in params or
                params['word1'] is None):
            raise ValueError("Missing the required parameter `word1` when calling `hirststonge_using_get7`")  # noqa: E501
        # verify the required parameter 'word2' is set
        if ('word2' not in params or
                params['word2'] is None):
            raise ValueError("Missing the required parameter `word2` when calling `hirststonge_using_get7`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'word1' in params:
            query_params.append(('word1', params['word1']))  # noqa: E501
        if 'pos1' in params:
            query_params.append(('pos1', params['pos1']))  # noqa: E501
        if 'word2' in params:
            query_params.append(('word2', params['word2']))  # noqa: E501
        if 'pos2' in params:
            query_params.append(('pos2', params['pos2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wordnet-similarity/wupalmer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WordnetSimilarityResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
