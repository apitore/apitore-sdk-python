# coding: utf-8

"""
    Word2Vec APIs

    Word2Vec.<BR />[Endpoint] https://api.apitore.com/api/8  # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SimilarityResponseEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'str',
        'log': 'str',
        'process_time': 'str',
        'similarity': 'float',
        'start_time': 'str',
        'word1': 'str',
        'word2': 'str'
    }

    attribute_map = {
        'end_time': 'endTime',
        'log': 'log',
        'process_time': 'processTime',
        'similarity': 'similarity',
        'start_time': 'startTime',
        'word1': 'word1',
        'word2': 'word2'
    }

    def __init__(self, end_time=None, log=None, process_time=None, similarity=None, start_time=None, word1=None, word2=None):  # noqa: E501
        """SimilarityResponseEntity - a model defined in Swagger"""  # noqa: E501

        self._end_time = None
        self._log = None
        self._process_time = None
        self._similarity = None
        self._start_time = None
        self._word1 = None
        self._word2 = None
        self.discriminator = None

        self.end_time = end_time
        self.log = log
        self.process_time = process_time
        if similarity is not None:
            self.similarity = similarity
        self.start_time = start_time
        self.word1 = word1
        self.word2 = word2

    @property
    def end_time(self):
        """Gets the end_time of this SimilarityResponseEntity.  # noqa: E501

        End date  # noqa: E501

        :return: The end_time of this SimilarityResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SimilarityResponseEntity.

        End date  # noqa: E501

        :param end_time: The end_time of this SimilarityResponseEntity.  # noqa: E501
        :type: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def log(self):
        """Gets the log of this SimilarityResponseEntity.  # noqa: E501

        Log message  # noqa: E501

        :return: The log of this SimilarityResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this SimilarityResponseEntity.

        Log message  # noqa: E501

        :param log: The log of this SimilarityResponseEntity.  # noqa: E501
        :type: str
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")  # noqa: E501

        self._log = log

    @property
    def process_time(self):
        """Gets the process_time of this SimilarityResponseEntity.  # noqa: E501

        Process time [millisecond]  # noqa: E501

        :return: The process_time of this SimilarityResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._process_time

    @process_time.setter
    def process_time(self, process_time):
        """Sets the process_time of this SimilarityResponseEntity.

        Process time [millisecond]  # noqa: E501

        :param process_time: The process_time of this SimilarityResponseEntity.  # noqa: E501
        :type: str
        """
        if process_time is None:
            raise ValueError("Invalid value for `process_time`, must not be `None`")  # noqa: E501

        self._process_time = process_time

    @property
    def similarity(self):
        """Gets the similarity of this SimilarityResponseEntity.  # noqa: E501

        Similarity  # noqa: E501

        :return: The similarity of this SimilarityResponseEntity.  # noqa: E501
        :rtype: float
        """
        return self._similarity

    @similarity.setter
    def similarity(self, similarity):
        """Sets the similarity of this SimilarityResponseEntity.

        Similarity  # noqa: E501

        :param similarity: The similarity of this SimilarityResponseEntity.  # noqa: E501
        :type: float
        """

        self._similarity = similarity

    @property
    def start_time(self):
        """Gets the start_time of this SimilarityResponseEntity.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_time of this SimilarityResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SimilarityResponseEntity.

        Start date  # noqa: E501

        :param start_time: The start_time of this SimilarityResponseEntity.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def word1(self):
        """Gets the word1 of this SimilarityResponseEntity.  # noqa: E501

        Input word1  # noqa: E501

        :return: The word1 of this SimilarityResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._word1

    @word1.setter
    def word1(self, word1):
        """Sets the word1 of this SimilarityResponseEntity.

        Input word1  # noqa: E501

        :param word1: The word1 of this SimilarityResponseEntity.  # noqa: E501
        :type: str
        """
        if word1 is None:
            raise ValueError("Invalid value for `word1`, must not be `None`")  # noqa: E501

        self._word1 = word1

    @property
    def word2(self):
        """Gets the word2 of this SimilarityResponseEntity.  # noqa: E501

        Input word2  # noqa: E501

        :return: The word2 of this SimilarityResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._word2

    @word2.setter
    def word2(self, word2):
        """Sets the word2 of this SimilarityResponseEntity.

        Input word2  # noqa: E501

        :param word2: The word2 of this SimilarityResponseEntity.  # noqa: E501
        :type: str
        """
        if word2 is None:
            raise ValueError("Invalid value for `word2`, must not be `None`")  # noqa: E501

        self._word2 = word2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimilarityResponseEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
