# coding: utf-8

"""
    Word2Vec APIs

    Word2Vec.<BR />[Endpoint] https://api.apitore.com/api/8  # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DistanceEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'distance': 'float',
        'word': 'str'
    }

    attribute_map = {
        'distance': 'distance',
        'word': 'word'
    }

    def __init__(self, distance=None, word=None):  # noqa: E501
        """DistanceEntity - a model defined in Swagger"""  # noqa: E501

        self._distance = None
        self._word = None
        self.discriminator = None

        self.distance = distance
        self.word = word

    @property
    def distance(self):
        """Gets the distance of this DistanceEntity.  # noqa: E501

        cosine distance  # noqa: E501

        :return: The distance of this DistanceEntity.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this DistanceEntity.

        cosine distance  # noqa: E501

        :param distance: The distance of this DistanceEntity.  # noqa: E501
        :type: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def word(self):
        """Gets the word of this DistanceEntity.  # noqa: E501

        word  # noqa: E501

        :return: The word of this DistanceEntity.  # noqa: E501
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this DistanceEntity.

        word  # noqa: E501

        :param word: The word of this DistanceEntity.  # noqa: E501
        :type: str
        """
        if word is None:
            raise ValueError("Invalid value for `word`, must not be `None`")  # noqa: E501

        self._word = word

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistanceEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
