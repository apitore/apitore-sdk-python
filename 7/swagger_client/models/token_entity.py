# coding: utf-8

"""
    Kuromoji APIs

    Kuromoji: japanese morphological analyzer.<BR />[Endpoint] https://api.apitore.com/api/7  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_features': 'str',
        'all_features_array': 'list[str]',
        'base_form': 'str',
        'conjugation_form': 'str',
        'conjugation_type': 'str',
        'known': 'bool',
        'part_of_speech_level1': 'str',
        'part_of_speech_level2': 'str',
        'part_of_speech_level3': 'str',
        'part_of_speech_level4': 'str',
        'position': 'int',
        'pronunciation': 'str',
        'reading': 'str',
        'surface': 'str'
    }

    attribute_map = {
        'all_features': 'allFeatures',
        'all_features_array': 'allFeaturesArray',
        'base_form': 'baseForm',
        'conjugation_form': 'conjugationForm',
        'conjugation_type': 'conjugationType',
        'known': 'known',
        'part_of_speech_level1': 'partOfSpeechLevel1',
        'part_of_speech_level2': 'partOfSpeechLevel2',
        'part_of_speech_level3': 'partOfSpeechLevel3',
        'part_of_speech_level4': 'partOfSpeechLevel4',
        'position': 'position',
        'pronunciation': 'pronunciation',
        'reading': 'reading',
        'surface': 'surface'
    }

    def __init__(self, all_features=None, all_features_array=None, base_form=None, conjugation_form=None, conjugation_type=None, known=None, part_of_speech_level1=None, part_of_speech_level2=None, part_of_speech_level3=None, part_of_speech_level4=None, position=None, pronunciation=None, reading=None, surface=None):  # noqa: E501
        """TokenEntity - a model defined in Swagger"""  # noqa: E501

        self._all_features = None
        self._all_features_array = None
        self._base_form = None
        self._conjugation_form = None
        self._conjugation_type = None
        self._known = None
        self._part_of_speech_level1 = None
        self._part_of_speech_level2 = None
        self._part_of_speech_level3 = None
        self._part_of_speech_level4 = None
        self._position = None
        self._pronunciation = None
        self._reading = None
        self._surface = None
        self.discriminator = None

        self.all_features = all_features
        self.all_features_array = all_features_array
        self.base_form = base_form
        self.conjugation_form = conjugation_form
        self.conjugation_type = conjugation_type
        self.known = known
        self.part_of_speech_level1 = part_of_speech_level1
        self.part_of_speech_level2 = part_of_speech_level2
        self.part_of_speech_level3 = part_of_speech_level3
        self.part_of_speech_level4 = part_of_speech_level4
        self.position = position
        self.pronunciation = pronunciation
        self.reading = reading
        self.surface = surface

    @property
    def all_features(self):
        """Gets the all_features of this TokenEntity.  # noqa: E501

        All features  # noqa: E501

        :return: The all_features of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._all_features

    @all_features.setter
    def all_features(self, all_features):
        """Sets the all_features of this TokenEntity.

        All features  # noqa: E501

        :param all_features: The all_features of this TokenEntity.  # noqa: E501
        :type: str
        """
        if all_features is None:
            raise ValueError("Invalid value for `all_features`, must not be `None`")  # noqa: E501

        self._all_features = all_features

    @property
    def all_features_array(self):
        """Gets the all_features_array of this TokenEntity.  # noqa: E501

        All features array  # noqa: E501

        :return: The all_features_array of this TokenEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._all_features_array

    @all_features_array.setter
    def all_features_array(self, all_features_array):
        """Sets the all_features_array of this TokenEntity.

        All features array  # noqa: E501

        :param all_features_array: The all_features_array of this TokenEntity.  # noqa: E501
        :type: list[str]
        """
        if all_features_array is None:
            raise ValueError("Invalid value for `all_features_array`, must not be `None`")  # noqa: E501

        self._all_features_array = all_features_array

    @property
    def base_form(self):
        """Gets the base_form of this TokenEntity.  # noqa: E501

        Base form  # noqa: E501

        :return: The base_form of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._base_form

    @base_form.setter
    def base_form(self, base_form):
        """Sets the base_form of this TokenEntity.

        Base form  # noqa: E501

        :param base_form: The base_form of this TokenEntity.  # noqa: E501
        :type: str
        """
        if base_form is None:
            raise ValueError("Invalid value for `base_form`, must not be `None`")  # noqa: E501

        self._base_form = base_form

    @property
    def conjugation_form(self):
        """Gets the conjugation_form of this TokenEntity.  # noqa: E501

        Conjugation form  # noqa: E501

        :return: The conjugation_form of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._conjugation_form

    @conjugation_form.setter
    def conjugation_form(self, conjugation_form):
        """Sets the conjugation_form of this TokenEntity.

        Conjugation form  # noqa: E501

        :param conjugation_form: The conjugation_form of this TokenEntity.  # noqa: E501
        :type: str
        """
        if conjugation_form is None:
            raise ValueError("Invalid value for `conjugation_form`, must not be `None`")  # noqa: E501

        self._conjugation_form = conjugation_form

    @property
    def conjugation_type(self):
        """Gets the conjugation_type of this TokenEntity.  # noqa: E501

        Conjugation type  # noqa: E501

        :return: The conjugation_type of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._conjugation_type

    @conjugation_type.setter
    def conjugation_type(self, conjugation_type):
        """Sets the conjugation_type of this TokenEntity.

        Conjugation type  # noqa: E501

        :param conjugation_type: The conjugation_type of this TokenEntity.  # noqa: E501
        :type: str
        """
        if conjugation_type is None:
            raise ValueError("Invalid value for `conjugation_type`, must not be `None`")  # noqa: E501

        self._conjugation_type = conjugation_type

    @property
    def known(self):
        """Gets the known of this TokenEntity.  # noqa: E501

        Known  # noqa: E501

        :return: The known of this TokenEntity.  # noqa: E501
        :rtype: bool
        """
        return self._known

    @known.setter
    def known(self, known):
        """Sets the known of this TokenEntity.

        Known  # noqa: E501

        :param known: The known of this TokenEntity.  # noqa: E501
        :type: bool
        """
        if known is None:
            raise ValueError("Invalid value for `known`, must not be `None`")  # noqa: E501

        self._known = known

    @property
    def part_of_speech_level1(self):
        """Gets the part_of_speech_level1 of this TokenEntity.  # noqa: E501

        Part of speech level1  # noqa: E501

        :return: The part_of_speech_level1 of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._part_of_speech_level1

    @part_of_speech_level1.setter
    def part_of_speech_level1(self, part_of_speech_level1):
        """Sets the part_of_speech_level1 of this TokenEntity.

        Part of speech level1  # noqa: E501

        :param part_of_speech_level1: The part_of_speech_level1 of this TokenEntity.  # noqa: E501
        :type: str
        """
        if part_of_speech_level1 is None:
            raise ValueError("Invalid value for `part_of_speech_level1`, must not be `None`")  # noqa: E501

        self._part_of_speech_level1 = part_of_speech_level1

    @property
    def part_of_speech_level2(self):
        """Gets the part_of_speech_level2 of this TokenEntity.  # noqa: E501

        Part of speech level2  # noqa: E501

        :return: The part_of_speech_level2 of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._part_of_speech_level2

    @part_of_speech_level2.setter
    def part_of_speech_level2(self, part_of_speech_level2):
        """Sets the part_of_speech_level2 of this TokenEntity.

        Part of speech level2  # noqa: E501

        :param part_of_speech_level2: The part_of_speech_level2 of this TokenEntity.  # noqa: E501
        :type: str
        """
        if part_of_speech_level2 is None:
            raise ValueError("Invalid value for `part_of_speech_level2`, must not be `None`")  # noqa: E501

        self._part_of_speech_level2 = part_of_speech_level2

    @property
    def part_of_speech_level3(self):
        """Gets the part_of_speech_level3 of this TokenEntity.  # noqa: E501

        Part of speech level3  # noqa: E501

        :return: The part_of_speech_level3 of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._part_of_speech_level3

    @part_of_speech_level3.setter
    def part_of_speech_level3(self, part_of_speech_level3):
        """Sets the part_of_speech_level3 of this TokenEntity.

        Part of speech level3  # noqa: E501

        :param part_of_speech_level3: The part_of_speech_level3 of this TokenEntity.  # noqa: E501
        :type: str
        """
        if part_of_speech_level3 is None:
            raise ValueError("Invalid value for `part_of_speech_level3`, must not be `None`")  # noqa: E501

        self._part_of_speech_level3 = part_of_speech_level3

    @property
    def part_of_speech_level4(self):
        """Gets the part_of_speech_level4 of this TokenEntity.  # noqa: E501

        Part of speech level4  # noqa: E501

        :return: The part_of_speech_level4 of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._part_of_speech_level4

    @part_of_speech_level4.setter
    def part_of_speech_level4(self, part_of_speech_level4):
        """Sets the part_of_speech_level4 of this TokenEntity.

        Part of speech level4  # noqa: E501

        :param part_of_speech_level4: The part_of_speech_level4 of this TokenEntity.  # noqa: E501
        :type: str
        """
        if part_of_speech_level4 is None:
            raise ValueError("Invalid value for `part_of_speech_level4`, must not be `None`")  # noqa: E501

        self._part_of_speech_level4 = part_of_speech_level4

    @property
    def position(self):
        """Gets the position of this TokenEntity.  # noqa: E501

        Position  # noqa: E501

        :return: The position of this TokenEntity.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TokenEntity.

        Position  # noqa: E501

        :param position: The position of this TokenEntity.  # noqa: E501
        :type: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def pronunciation(self):
        """Gets the pronunciation of this TokenEntity.  # noqa: E501

        Pronunciation  # noqa: E501

        :return: The pronunciation of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._pronunciation

    @pronunciation.setter
    def pronunciation(self, pronunciation):
        """Sets the pronunciation of this TokenEntity.

        Pronunciation  # noqa: E501

        :param pronunciation: The pronunciation of this TokenEntity.  # noqa: E501
        :type: str
        """
        if pronunciation is None:
            raise ValueError("Invalid value for `pronunciation`, must not be `None`")  # noqa: E501

        self._pronunciation = pronunciation

    @property
    def reading(self):
        """Gets the reading of this TokenEntity.  # noqa: E501

        Reading  # noqa: E501

        :return: The reading of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._reading

    @reading.setter
    def reading(self, reading):
        """Sets the reading of this TokenEntity.

        Reading  # noqa: E501

        :param reading: The reading of this TokenEntity.  # noqa: E501
        :type: str
        """
        if reading is None:
            raise ValueError("Invalid value for `reading`, must not be `None`")  # noqa: E501

        self._reading = reading

    @property
    def surface(self):
        """Gets the surface of this TokenEntity.  # noqa: E501

        Surface  # noqa: E501

        :return: The surface of this TokenEntity.  # noqa: E501
        :rtype: str
        """
        return self._surface

    @surface.setter
    def surface(self, surface):
        """Sets the surface of this TokenEntity.

        Surface  # noqa: E501

        :param surface: The surface of this TokenEntity.  # noqa: E501
        :type: str
        """
        if surface is None:
            raise ValueError("Invalid value for `surface`, must not be `None`")  # noqa: E501

        self._surface = surface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
