# coding: utf-8

"""
    Kmeans clustering by word2vec

    Kmeans clustering by word2vec.<BR />[Endpoint] https://api.apitore.com/api/48  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.factor_entity import FactorEntity  # noqa: F401,E501


class ClusterEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'center': 'list[float]',
        'words': 'list[FactorEntity]'
    }

    attribute_map = {
        'center': 'center',
        'words': 'words'
    }

    def __init__(self, center=None, words=None):  # noqa: E501
        """ClusterEntity - a model defined in Swagger"""  # noqa: E501

        self._center = None
        self._words = None
        self.discriminator = None

        self.center = center
        self.words = words

    @property
    def center(self):
        """Gets the center of this ClusterEntity.  # noqa: E501

        center  # noqa: E501

        :return: The center of this ClusterEntity.  # noqa: E501
        :rtype: list[float]
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this ClusterEntity.

        center  # noqa: E501

        :param center: The center of this ClusterEntity.  # noqa: E501
        :type: list[float]
        """
        if center is None:
            raise ValueError("Invalid value for `center`, must not be `None`")  # noqa: E501

        self._center = center

    @property
    def words(self):
        """Gets the words of this ClusterEntity.  # noqa: E501

        words  # noqa: E501

        :return: The words of this ClusterEntity.  # noqa: E501
        :rtype: list[FactorEntity]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this ClusterEntity.

        words  # noqa: E501

        :param words: The words of this ClusterEntity.  # noqa: E501
        :type: list[FactorEntity]
        """
        if words is None:
            raise ValueError("Invalid value for `words`, must not be `None`")  # noqa: E501

        self._words = words

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
