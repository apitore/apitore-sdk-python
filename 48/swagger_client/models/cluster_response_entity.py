# coding: utf-8

"""
    Kmeans clustering by word2vec

    Kmeans clustering by word2vec.<BR />[Endpoint] https://api.apitore.com/api/48  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.cluster_entity import ClusterEntity  # noqa: F401,E501


class ClusterResponseEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clusters': 'list[ClusterEntity]',
        'end_time': 'str',
        'log': 'str',
        'num': 'str',
        'process_time': 'str',
        'start_time': 'str'
    }

    attribute_map = {
        'clusters': 'clusters',
        'end_time': 'endTime',
        'log': 'log',
        'num': 'num',
        'process_time': 'processTime',
        'start_time': 'startTime'
    }

    def __init__(self, clusters=None, end_time=None, log=None, num=None, process_time=None, start_time=None):  # noqa: E501
        """ClusterResponseEntity - a model defined in Swagger"""  # noqa: E501

        self._clusters = None
        self._end_time = None
        self._log = None
        self._num = None
        self._process_time = None
        self._start_time = None
        self.discriminator = None

        if clusters is not None:
            self.clusters = clusters
        self.end_time = end_time
        self.log = log
        self.num = num
        self.process_time = process_time
        self.start_time = start_time

    @property
    def clusters(self):
        """Gets the clusters of this ClusterResponseEntity.  # noqa: E501

        Clusters  # noqa: E501

        :return: The clusters of this ClusterResponseEntity.  # noqa: E501
        :rtype: list[ClusterEntity]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this ClusterResponseEntity.

        Clusters  # noqa: E501

        :param clusters: The clusters of this ClusterResponseEntity.  # noqa: E501
        :type: list[ClusterEntity]
        """

        self._clusters = clusters

    @property
    def end_time(self):
        """Gets the end_time of this ClusterResponseEntity.  # noqa: E501

        End date  # noqa: E501

        :return: The end_time of this ClusterResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ClusterResponseEntity.

        End date  # noqa: E501

        :param end_time: The end_time of this ClusterResponseEntity.  # noqa: E501
        :type: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def log(self):
        """Gets the log of this ClusterResponseEntity.  # noqa: E501

        Log message  # noqa: E501

        :return: The log of this ClusterResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this ClusterResponseEntity.

        Log message  # noqa: E501

        :param log: The log of this ClusterResponseEntity.  # noqa: E501
        :type: str
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")  # noqa: E501

        self._log = log

    @property
    def num(self):
        """Gets the num of this ClusterResponseEntity.  # noqa: E501

        Cluster num  # noqa: E501

        :return: The num of this ClusterResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this ClusterResponseEntity.

        Cluster num  # noqa: E501

        :param num: The num of this ClusterResponseEntity.  # noqa: E501
        :type: str
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")  # noqa: E501

        self._num = num

    @property
    def process_time(self):
        """Gets the process_time of this ClusterResponseEntity.  # noqa: E501

        Process time [millisecond]  # noqa: E501

        :return: The process_time of this ClusterResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._process_time

    @process_time.setter
    def process_time(self, process_time):
        """Sets the process_time of this ClusterResponseEntity.

        Process time [millisecond]  # noqa: E501

        :param process_time: The process_time of this ClusterResponseEntity.  # noqa: E501
        :type: str
        """
        if process_time is None:
            raise ValueError("Invalid value for `process_time`, must not be `None`")  # noqa: E501

        self._process_time = process_time

    @property
    def start_time(self):
        """Gets the start_time of this ClusterResponseEntity.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_time of this ClusterResponseEntity.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ClusterResponseEntity.

        Start date  # noqa: E501

        :param start_time: The start_time of this ClusterResponseEntity.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterResponseEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
