# coding: utf-8

"""
    Tweet summarization APIs

    Tweet summarization.<BR />[Endpoint] https://api.apitore.com/api/27  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TweetSummarizeEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'int',
        'score': 'float',
        'status_id': 'int',
        'text': 'str',
        'user_id': 'int',
        'user_name': 'str',
        'user_profile_image_url': 'str',
        'user_screen_name': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'score': 'score',
        'status_id': 'statusId',
        'text': 'text',
        'user_id': 'userId',
        'user_name': 'userName',
        'user_profile_image_url': 'userProfileImageURL',
        'user_screen_name': 'userScreenName'
    }

    def __init__(self, created_at=None, score=None, status_id=None, text=None, user_id=None, user_name=None, user_profile_image_url=None, user_screen_name=None):  # noqa: E501
        """TweetSummarizeEntity - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._score = None
        self._status_id = None
        self._text = None
        self._user_id = None
        self._user_name = None
        self._user_profile_image_url = None
        self._user_screen_name = None
        self.discriminator = None

        self.created_at = created_at
        self.score = score
        self.status_id = status_id
        self.text = text
        self.user_id = user_id
        self.user_name = user_name
        self.user_profile_image_url = user_profile_image_url
        self.user_screen_name = user_screen_name

    @property
    def created_at(self):
        """Gets the created_at of this TweetSummarizeEntity.  # noqa: E501

        Tweet date  # noqa: E501

        :return: The created_at of this TweetSummarizeEntity.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TweetSummarizeEntity.

        Tweet date  # noqa: E501

        :param created_at: The created_at of this TweetSummarizeEntity.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def score(self):
        """Gets the score of this TweetSummarizeEntity.  # noqa: E501

        Summarization score  # noqa: E501

        :return: The score of this TweetSummarizeEntity.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TweetSummarizeEntity.

        Summarization score  # noqa: E501

        :param score: The score of this TweetSummarizeEntity.  # noqa: E501
        :type: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def status_id(self):
        """Gets the status_id of this TweetSummarizeEntity.  # noqa: E501

        Status ID  # noqa: E501

        :return: The status_id of this TweetSummarizeEntity.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this TweetSummarizeEntity.

        Status ID  # noqa: E501

        :param status_id: The status_id of this TweetSummarizeEntity.  # noqa: E501
        :type: int
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def text(self):
        """Gets the text of this TweetSummarizeEntity.  # noqa: E501

        Tweet text  # noqa: E501

        :return: The text of this TweetSummarizeEntity.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TweetSummarizeEntity.

        Tweet text  # noqa: E501

        :param text: The text of this TweetSummarizeEntity.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def user_id(self):
        """Gets the user_id of this TweetSummarizeEntity.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this TweetSummarizeEntity.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TweetSummarizeEntity.

        User ID  # noqa: E501

        :param user_id: The user_id of this TweetSummarizeEntity.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this TweetSummarizeEntity.  # noqa: E501

        User name  # noqa: E501

        :return: The user_name of this TweetSummarizeEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this TweetSummarizeEntity.

        User name  # noqa: E501

        :param user_name: The user_name of this TweetSummarizeEntity.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def user_profile_image_url(self):
        """Gets the user_profile_image_url of this TweetSummarizeEntity.  # noqa: E501

        User profile image URL  # noqa: E501

        :return: The user_profile_image_url of this TweetSummarizeEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_profile_image_url

    @user_profile_image_url.setter
    def user_profile_image_url(self, user_profile_image_url):
        """Sets the user_profile_image_url of this TweetSummarizeEntity.

        User profile image URL  # noqa: E501

        :param user_profile_image_url: The user_profile_image_url of this TweetSummarizeEntity.  # noqa: E501
        :type: str
        """
        if user_profile_image_url is None:
            raise ValueError("Invalid value for `user_profile_image_url`, must not be `None`")  # noqa: E501

        self._user_profile_image_url = user_profile_image_url

    @property
    def user_screen_name(self):
        """Gets the user_screen_name of this TweetSummarizeEntity.  # noqa: E501

        User screen name  # noqa: E501

        :return: The user_screen_name of this TweetSummarizeEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_screen_name

    @user_screen_name.setter
    def user_screen_name(self, user_screen_name):
        """Sets the user_screen_name of this TweetSummarizeEntity.

        User screen name  # noqa: E501

        :param user_screen_name: The user_screen_name of this TweetSummarizeEntity.  # noqa: E501
        :type: str
        """
        if user_screen_name is None:
            raise ValueError("Invalid value for `user_screen_name`, must not be `None`")  # noqa: E501

        self._user_screen_name = user_screen_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TweetSummarizeEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
