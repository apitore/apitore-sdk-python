# coding: utf-8

"""
    Sentence Similarity

    Sentence Similarity.<BR />[Endpoint] https://api.apitore.com/api/53  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TextRequestEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text1': 'str',
        'text2': 'str'
    }

    attribute_map = {
        'text1': 'text1',
        'text2': 'text2'
    }

    def __init__(self, text1=None, text2=None):  # noqa: E501
        """TextRequestEntity - a model defined in Swagger"""  # noqa: E501

        self._text1 = None
        self._text2 = None
        self.discriminator = None

        self.text1 = text1
        self.text2 = text2

    @property
    def text1(self):
        """Gets the text1 of this TextRequestEntity.  # noqa: E501

        text1  # noqa: E501

        :return: The text1 of this TextRequestEntity.  # noqa: E501
        :rtype: str
        """
        return self._text1

    @text1.setter
    def text1(self, text1):
        """Sets the text1 of this TextRequestEntity.

        text1  # noqa: E501

        :param text1: The text1 of this TextRequestEntity.  # noqa: E501
        :type: str
        """
        if text1 is None:
            raise ValueError("Invalid value for `text1`, must not be `None`")  # noqa: E501

        self._text1 = text1

    @property
    def text2(self):
        """Gets the text2 of this TextRequestEntity.  # noqa: E501

        text2  # noqa: E501

        :return: The text2 of this TextRequestEntity.  # noqa: E501
        :rtype: str
        """
        return self._text2

    @text2.setter
    def text2(self, text2):
        """Sets the text2 of this TextRequestEntity.

        text2  # noqa: E501

        :param text2: The text2 of this TextRequestEntity.  # noqa: E501
        :type: str
        """
        if text2 is None:
            raise ValueError("Invalid value for `text2`, must not be `None`")  # noqa: E501

        self._text2 = text2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextRequestEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
