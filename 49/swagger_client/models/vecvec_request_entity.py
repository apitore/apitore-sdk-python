# coding: utf-8

"""
    Cosine Similarity

    Cosine Similarity.<BR />[Endpoint] https://api.apitore.com/api/49  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VecvecRequestEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vec1': 'list[float]',
        'vec2': 'list[float]'
    }

    attribute_map = {
        'vec1': 'vec1',
        'vec2': 'vec2'
    }

    def __init__(self, vec1=None, vec2=None):  # noqa: E501
        """VecvecRequestEntity - a model defined in Swagger"""  # noqa: E501

        self._vec1 = None
        self._vec2 = None
        self.discriminator = None

        self.vec1 = vec1
        self.vec2 = vec2

    @property
    def vec1(self):
        """Gets the vec1 of this VecvecRequestEntity.  # noqa: E501

        Vector1  # noqa: E501

        :return: The vec1 of this VecvecRequestEntity.  # noqa: E501
        :rtype: list[float]
        """
        return self._vec1

    @vec1.setter
    def vec1(self, vec1):
        """Sets the vec1 of this VecvecRequestEntity.

        Vector1  # noqa: E501

        :param vec1: The vec1 of this VecvecRequestEntity.  # noqa: E501
        :type: list[float]
        """
        if vec1 is None:
            raise ValueError("Invalid value for `vec1`, must not be `None`")  # noqa: E501

        self._vec1 = vec1

    @property
    def vec2(self):
        """Gets the vec2 of this VecvecRequestEntity.  # noqa: E501

        Vector2  # noqa: E501

        :return: The vec2 of this VecvecRequestEntity.  # noqa: E501
        :rtype: list[float]
        """
        return self._vec2

    @vec2.setter
    def vec2(self, vec2):
        """Sets the vec2 of this VecvecRequestEntity.

        Vector2  # noqa: E501

        :param vec2: The vec2 of this VecvecRequestEntity.  # noqa: E501
        :type: list[float]
        """
        if vec2 is None:
            raise ValueError("Invalid value for `vec2`, must not be `None`")  # noqa: E501

        self._vec2 = vec2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VecvecRequestEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
