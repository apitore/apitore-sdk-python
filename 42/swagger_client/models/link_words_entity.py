# coding: utf-8

"""
    WordNet hypernym APIs

    Return hypernym words.<BR />[Endpoint] https://api.apitore.com/api/42  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LinkWordsEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'labelen': 'str',
        'labelja': 'str',
        'pos': 'str',
        'words': 'list[str]'
    }

    attribute_map = {
        'labelen': 'labelen',
        'labelja': 'labelja',
        'pos': 'pos',
        'words': 'words'
    }

    def __init__(self, labelen=None, labelja=None, pos=None, words=None):  # noqa: E501
        """LinkWordsEntity - a model defined in Swagger"""  # noqa: E501

        self._labelen = None
        self._labelja = None
        self._pos = None
        self._words = None
        self.discriminator = None

        self.labelen = labelen
        self.labelja = labelja
        self.pos = pos
        self.words = words

    @property
    def labelen(self):
        """Gets the labelen of this LinkWordsEntity.  # noqa: E501

        Link label En  # noqa: E501

        :return: The labelen of this LinkWordsEntity.  # noqa: E501
        :rtype: str
        """
        return self._labelen

    @labelen.setter
    def labelen(self, labelen):
        """Sets the labelen of this LinkWordsEntity.

        Link label En  # noqa: E501

        :param labelen: The labelen of this LinkWordsEntity.  # noqa: E501
        :type: str
        """
        if labelen is None:
            raise ValueError("Invalid value for `labelen`, must not be `None`")  # noqa: E501

        self._labelen = labelen

    @property
    def labelja(self):
        """Gets the labelja of this LinkWordsEntity.  # noqa: E501

        Link label Ja  # noqa: E501

        :return: The labelja of this LinkWordsEntity.  # noqa: E501
        :rtype: str
        """
        return self._labelja

    @labelja.setter
    def labelja(self, labelja):
        """Sets the labelja of this LinkWordsEntity.

        Link label Ja  # noqa: E501

        :param labelja: The labelja of this LinkWordsEntity.  # noqa: E501
        :type: str
        """
        if labelja is None:
            raise ValueError("Invalid value for `labelja`, must not be `None`")  # noqa: E501

        self._labelja = labelja

    @property
    def pos(self):
        """Gets the pos of this LinkWordsEntity.  # noqa: E501

        Input part-of-speech  # noqa: E501

        :return: The pos of this LinkWordsEntity.  # noqa: E501
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this LinkWordsEntity.

        Input part-of-speech  # noqa: E501

        :param pos: The pos of this LinkWordsEntity.  # noqa: E501
        :type: str
        """
        if pos is None:
            raise ValueError("Invalid value for `pos`, must not be `None`")  # noqa: E501

        self._pos = pos

    @property
    def words(self):
        """Gets the words of this LinkWordsEntity.  # noqa: E501

        Link words  # noqa: E501

        :return: The words of this LinkWordsEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this LinkWordsEntity.

        Link words  # noqa: E501

        :param words: The words of this LinkWordsEntity.  # noqa: E501
        :type: list[str]
        """
        if words is None:
            raise ValueError("Invalid value for `words`, must not be `None`")  # noqa: E501

        self._words = words

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkWordsEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
